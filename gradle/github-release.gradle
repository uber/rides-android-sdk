import groovy.text.GStringTemplateEngine
import org.codehaus.groovy.runtime.DateGroovyMethods

plugins {
    id 'net.researchgate.release' version '2.1.2'
    id 'co.riiid.github' version '0.4.2'
}

ext.set("oldVersion", VERSION_NAME.replaceAll("-SNAPSHOT", ""))
ext.set("samples", project(":samples").subprojects.collect { it.path })

["GITHUB_TOKEN"].each {
    checkAndDefaultProperty(it)
}

def checkAndDefaultProperty(prop) {
    if (!project.hasProperty(prop)) {
        checkProperty(prop)
        rootProject.ext.set(prop, prop)
    }
}

def checkProperty(prop) {
    if (!project.hasProperty(prop)) {
        logger.warn("Add " + prop + " to your ~/.gradle/gradle.properties file.")
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def generateReleaseNotes() {
    def changelogSnippet = generateChangelogSnippet()
    def releaseVersion = rootProject.version.replaceAll('-SNAPSHOT', '')
    def model = [title  : "Uber Rides Android SDK (Beta) v${releaseVersion}",
                 date   : DateGroovyMethods.format(new Date(), 'MM/dd/yyyy'),
                 snippet: changelogSnippet,
                 assets : project.samples.collect {
                     [
                             title      : project(it).name,
                             download   : GITHUB_DOWNLOAD_PREFIX + "v${releaseVersion}/${project(it).name}-debug.apk",
                             description: project(it).description,
                     ]
                 }]
    def engine = new GStringTemplateEngine()
    def template = engine.createTemplate(rootProject.file('releasenotes.gtpl')).make(model)
    return template.toString()
}

def generateChangelogSnippet() {
    def changelog = rootProject.file('CHANGELOG.md').text
    def snippet = ""
    def stop = false
    changelog.eachLine { line, count ->
        if (count >= 2) {
            stop = stop || line.startsWith("v");
            if (!stop) {
                snippet += line + "\n";
            }
        }
    }
    return "  " + snippet.trim()
}

task updateReleaseVersionChangelog() {
    doLast {
        def newVersion = rootProject.version.replaceAll('-SNAPSHOT', '')
        def changelog = rootProject.file('CHANGELOG.md')
        def changelogText = changelog.text
        def date = new Date().format('MM/dd/yyyy')

        if (changelogText.startsWith("v${oldVersion} - TBD")) {
            def updatedChangelog = changelogText.replace("v${oldVersion} - TBD",
                    "v${newVersion} - ${date}")
            changelog.write(updatedChangelog)

        }
    }
}

task updateNewVersionChangelog() {
    doLast {
        def newVersion = rootProject.version.replaceAll('-SNAPSHOT', '')
        def changelog = rootProject.file('CHANGELOG.md')
        def changelogText = changelog.text

        if (!changelogText.startsWith("v${newVersion} - TBD")) {
            def updatedChangelog = "v${newVersion} - TBD\n"
            def dashesCount = updatedChangelog.length() - 1
            updatedChangelog += "-" * dashesCount + "\n\n" + changelogText
            changelog.write(updatedChangelog)
        }
    }
}

task configureGithub() {
    doLast {
        github {
            owner = GITHUB_OWNER
            repo = GITHUB_REPO
            token = "${GITHUB_TOKEN}"
            tagName = "v${rootProject.version}"
            targetCommitish = GITHUB_BRANCH
            name = "v${rootProject.version}"
            body = generateReleaseNotes()
            assets = project.samples.collect {
                "${project(it).buildDir.absolutePath}/outputs/apk/${project(it).name}-debug.apk"
            }
        }
    }
}

githubRelease.dependsOn ":configureGithub"
configureGithub.mustRunAfter ":createReleaseTag"

updateVersion.dependsOn ":githubRelease"
githubRelease.mustRunAfter ":configureGithub"

afterReleaseBuild.dependsOn(":core-android:uploadArchives", ":rides-android:uploadArchives")

updateReleaseVersionChangelog.mustRunAfter ":afterReleaseBuild"
preTagCommit.dependsOn ':updateReleaseVersionChangelog'
updateNewVersionChangelog.mustRunAfter ":updateVersion"
commitNewVersion.dependsOn ':updateNewVersionChangelog'

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false
    revertOnFail = true
    tagTemplate = 'v$version'
    versionProperties = ['VERSION_NAME']
}
